name: Deploy Tharara CMS

on:
  push:
    branches:
      - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: tharara-cms
  REGION: asia-south1
  REPOSITORY: tharara-cms

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build and Push Docker image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest

          echo "Pushing Docker image..."
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          echo "Deploying to Cloud Run..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 2 \
            --timeout 900 \
            --max-instances 10 \
            --min-instances 0 \
            --service-account github-deploy-tharara@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
            --set-env-vars "NODE_ENV=production" \
            --set-env-vars "HOST=0.0.0.0" \
            --set-env-vars "DATABASE_CLIENT=sqlite" \
            --set-env-vars "DATABASE_FILENAME=/tmp/data.db" \
            --set-env-vars "APP_KEYS=${{ secrets.STRAPI_APP_KEYS }}" \
            --set-env-vars "API_TOKEN_SALT=${{ secrets.STRAPI_API_TOKEN_SALT }}" \
            --set-env-vars "ADMIN_JWT_SECRET=${{ secrets.STRAPI_ADMIN_JWT_SECRET }}" \
            --set-env-vars "JWT_SECRET=${{ secrets.STRAPI_JWT_SECRET }}" \
            --set-env-vars "GCS_BUCKET=${{ secrets.GCS_BUCKET }}"

      - name: Verify deployment
        run: |
          echo "Waiting for service to be ready..."
          sleep 30

          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "Service deployed at: $SERVICE_URL"

          # Test if service is responding
          response=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL || true)
          if [ "$response" = "200" ] || [ "$response" = "301" ] || [ "$response" = "302" ]; then
            echo "‚úÖ Service is responding with status code: $response"
            echo "üéâ Deployment successful!"
            echo "üì± Admin panel: $SERVICE_URL/admin"
          else
            echo "‚ö†Ô∏è Service returned status code: $response"
            echo "Check logs at: https://console.cloud.google.com/run/detail/${{ env.REGION }}/${{ env.SERVICE_NAME }}/logs"
          fi

      # Optional: Add PostgreSQL after SQLite works
      - name: Upgrade to PostgreSQL
        if: true
        run: |
          echo "Upgrading to PostgreSQL..."
          gcloud run services update ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --add-cloudsql-instances tharara-project:asia-south1:tharara-cms-db \
            --update-env-vars "DATABASE_CLIENT=postgres" \
            --update-env-vars "DATABASE_HOST=/cloudsql/tharara-project:asia-south1:tharara-cms-db" \
            --update-env-vars "DATABASE_PORT=5432" \
            --update-env-vars "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" \
            --update-env-vars "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" \
            --update-env-vars "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" \
            --remove-env-vars "DATABASE_FILENAME"
