name: Deploy Tharara CMS

on:
  push:
    branches:
      - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: tharara-cms
  REGION: asia-south1
  REPOSITORY: tharara-cms

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest

      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest

      # First deploy with SQLite to ensure it works
      - name: Deploy to Cloud Run (SQLite - Testing)
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 2 \
            --timeout 300 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=production,HOST=0.0.0.0,DATABASE_CLIENT=sqlite,DATABASE_FILENAME=.tmp/data.db,APP_KEYS="${{ secrets.STRAPI_APP_KEYS }}",API_TOKEN_SALT="${{ secrets.STRAPI_API_TOKEN_SALT }}",ADMIN_JWT_SECRET="${{ secrets.STRAPI_ADMIN_JWT_SECRET }}",JWT_SECRET="${{ secrets.STRAPI_JWT_SECRET }}"

      - name: Wait for service to be ready
        run: |
          echo "Waiting for service to be ready..."
          sleep 30

      - name: Test deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "Service URL: $SERVICE_URL"

          # Test if service is responding
          response=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL)
          if [ $response -eq 200 ] || [ $response -eq 301 ] || [ $response -eq 302 ]; then
            echo "‚úÖ Service is responding with status code: $response"
          else
            echo "‚ö†Ô∏è Service returned status code: $response"
          fi

      # Once SQLite works, update to PostgreSQL
      - name: Update to PostgreSQL (if SQLite succeeds)
        if: success()
        run: |
          echo "SQLite deployment successful! Now updating to PostgreSQL..."
          gcloud run services update ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --add-cloudsql-instances tharara-project:asia-south1:tharara-cms-db \
            --update-env-vars DATABASE_CLIENT=postgres,DATABASE_HOST=/cloudsql/tharara-project:asia-south1:tharara-cms-db,DATABASE_PORT=5432,DATABASE_NAME="${{ secrets.DATABASE_NAME }}",DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}",DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}"

          echo "‚úÖ Updated to PostgreSQL!"

      - name: Final deployment URL
        if: success()
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "üöÄ Deployment successful!"
          echo "üìç Service URL: $SERVICE_URL"
          echo "üë§ Admin panel: $SERVICE_URL/admin"
